"""
Django settings for supportal project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import logging
import os

import boto3
import requests
from django.core.exceptions import ImproperlyConfigured

# TODO: You will need to write your own get_env_var here
# from ew_common.get_env_variables import get_env_var

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SECRET_KEY = get_env_var("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(get_env_var("DJANGO_DEBUG", optional=True, default=False))

ALLOWED_HOSTS = ["*"]

LOCAL_APPS = ["supportal.app", "supportal.shifter"]


INSTALLED_APPS = LOCAL_APPS + [
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.gis",
    "django.contrib.messages",
    "django.contrib.sessions",
    "django.contrib.staticfiles",
    "django_s3_storage",
    "drf_yasg",
    "rest_framework",
]

CORS_ORIGIN_ALLOW_ALL = True

AUTH_USER_MODEL = "app.User"

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "ew_common.django_middleware.profiling.ProfilingMiddleware",
    "ew_common.django_middleware.app_errors.AppErrorsMiddleware",
]

ROOT_URLCONF = "supportal.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "supportal.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": get_env_var("POSTGRES_DB", optional=True, default="supportal"),
        "USER": get_env_var("POSTGRES_USER"),
        "PASSWORD": get_env_var("POSTGRES_PASSWORD"),
        "HOST": get_env_var("POSTGRES_HOST"),
        "PORT": int(get_env_var("POSTGRES_PORT", optional=True, default="5432")),
    }
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {"console": {"class": "logging.StreamHandler"}},
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
        }
    },
}

REDIS_DB = 1  # don't use the default database (0)
REDIS_PORT = int(get_env_var("SHARED_REDIS_PORT", optional=True, default=6379))
REDIS_HOST = get_env_var("SHARED_REDIS_HOST")
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}",
        "KEY_PREFIX": "supportal",
        "TIMEOUT": 300,  # 5 minutes
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "IGNORE_EXCEPTIONS": True,
        },
    }
}

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "supportal.app.authentication_backend.CognitoJWTAuthentication"
    ],
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "DEFAULT_THROTTLE_CLASSES": (
        "supportal.throttles.HourScopedRateThrottle",
        "supportal.throttles.DayScopedRateThrottle",
    ),
    # Note: base per-ip rate limiting is handled by our WAF
    "DEFAULT_THROTTLE_RATES": {
        # vol_prospect_assignments GETS, these limits are fairly high because
        # we don't want to trip them with page refreshes and such.
        # Properly rate limiting the number of distinct profiles viewed by a user
        # is more complicated and can't be accomplished in DRF's throttling framework
        "hour.vol_prospect_assignments": "1000/hour",
        "day.vol_prospect_assignments": "5000/day",
        # vol_prospect_assignments, each call returns a batch of 10
        "hour.vol_prospect_assignments.assign": "10/hour",
        "day.vol_prospect_assignments.assign": "50/day",
        # vol_prospect_contact_event creations
        # This rate limit is slightly redundant with the assignment limit
        # but it prevents someone from going rogue and bulk changing data
        # for people they have already contacted.
        "hour.vol_prospect_contact_events.create": "100/hour",
        "day.vol_prospect_contact_events.create": "500/day",
    },
}

# Shifter uses separate IP based rate limiting:
SHIFTER_IP_RATE_LIMIT = "20/min"

# This is required for geodjango when running in AWS Lambda or if GDAL is
# installed in a non-standard location.
if "GDAL_LIBRARY_PATH" in os.environ:
    GDAL_LIBRARY_PATH = os.environ["GDAL_LIBRARY_PATH"]

COGNITO_USER_POOL = get_env_var("COGNITO_USER_POOL")
COGNITO_USER_POOL_URL = (
    f"https://cognito-idp.us-east-1.amazonaws.com/{COGNITO_USER_POOL}"
)

# This should be the client id of the Cognito application with the
# authorization_code and/or implicit grants, not the client_credentials
# app used for server-to-server communication.
COGNITO_USER_LOGIN_CLIENT_ID = get_env_var("COGNITO_USER_LOGIN_CLIENT_ID")

# Password validation, Django passwords are only used for admin login
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# Serve directly from S3: http://romandc.com/zappa-django-guide/walk_static/
STATICFILES_STORAGE = "django_s3_storage.storage.StaticS3Storage"
AWS_S3_BUCKET_NAME_STATIC = "ew-public-supportal-static"
AWS_S3_CUSTOM_DOMAIN = f"{STATICFILES_STORAGE}.s3.amazonaws.com"
STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/"

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {"type": "cognito-oidc", "name": "Authorization", "in": "header"}
    }
}

GOOGLE_MAPS_API_KEY = get_env_var("GOOGLE_MAPS_API_KEY", optional=True)
SUPPORTAL_BASE_URL = get_env_var("SUPPORTAL_BASE_URL", False)

# SES settings
FROM_EMAIL = "ElizabethWarren.com <info@mail.elizabethwarren.com>"
REPLY_TO_EMAIL = "ElizabethWarren.com <info@elizabethwarren.com>"
CONFIGURATION_SET_NAME = get_env_var(
    "CONFIGURATION_SET_NAME", optional=True, default="organizing_emails"
)
UNSUBSCRIBE_URL = SUPPORTAL_BASE_URL + "unsubscribe"

# Django Admin Interface
# We do not want to run django's admin interface on the user
# accessible instances of switchboard.
DJANGO_ADMIN_ENABLED = bool(int(os.environ.get("DJANGO_ADMIN_ENABLED", 0)))
DJANGO_ADMIN_ONLY = bool(int(os.environ.get("DJANGO_ADMIN_ONLY", 0)))

# AWS environment variables
REGION = os.environ.get("AWS_REGION", "NoRegion")
FUNCTION_NAME = os.environ.get("AWS_LAMBDA_FUNCTION_NAME", "NoFunctionName")
FUNCTION_VERSION = os.environ.get("AWS_LAMBDA_FUNCTION_VERSION", "NoFunctionVersion")

# Stage Description
STAGE = os.environ.get("STAGE", "NoStage")

# Profiling middleware configuration
TRACK_PCT_OF_REQUESTS = float(os.environ.get("TRACK_PCT_OF_REQUESTS", 1.0))

# Doc key for google docs
GOOGLE_DOCS_CREDENTIALS = get_env_var("GOOGLE_DOCS_CREDENTIALS", optional=True)
PRIORITIZATION_META = get_env_var("PRIORITIZATIONS_META", optional=True)

# Note: we are hoping to do all event search and signups through the National org with
# the help of event co-ownership. If this doesn't work, however, we'll have to move to
# a more complex set up where we manage keys for all the different states.
#
# See: https://docs.google.com/document/d/1wdpU-NxcBFq0hKxMCslpjjApcGjxgcNp9smvI1jzMVY/edit#heading=h.fnawp0m1f5p2
# All settings are optional as this feature is still being actively developed
MOBILIZE_AMERICA_BASE_URL = get_env_var("MOBILIZE_AMERICA_BASE_URL", optional=True)
MOBILIZE_AMERICA_ORG_ID = get_env_var("MOBILIZE_AMERICA_ORG_ID", optional=True)
MOBILIZE_AMERICA_ORG_ID = MOBILIZE_AMERICA_ORG_ID and int(MOBILIZE_AMERICA_ORG_ID)
MOBILIZE_AMERICA_API_KEY = get_env_var("MOBILIZE_AMERICA_API_KEY", optional=True)

# Useful for testing against staging but should never be turned on in production
MOBILIZE_AMERICA_DEFAULT_VISIBILITY = get_env_var(
    "MOBILIZE_AMERICA_DEFAULT_VISIBILITY", optional=True, default="PUBLIC"
)

if (
    MOBILIZE_AMERICA_DEFAULT_VISIBILITY == "PRIVATE"
    and os.environ.get("INFRASTRUCTURE") == "prod"
):
    raise ImproperlyConfigured(
        "Mobilize America: PRIVATE visibility not allowed in production"
    )
